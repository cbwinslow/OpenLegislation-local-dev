name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.4'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openleg_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn test -Dspring.profiles.active=test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: JUnit Tests
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          **/target/surefire-reports/*.xml
          **/target/site/jacoco/*.xml

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Run Spotless check
      run: mvn spotless:check

    - name: Run PMD analysis
      run: mvn pmd:check

    - name: Run Checkstyle
      run: mvn checkstyle:check

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v6
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  federal-data-integration:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'federal') || contains(github.event.pull_request.title, 'federal')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd tools
        pip install -r requirements.txt

    - name: Run federal data ingestion tests
      run: |
        cd tools
        python -m pytest test_govinfo_ingestion.py -v

    - name: Test sample data processing
      run: |
        cd tools
        python govinfo_data_connector.py --test-mode

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Build Docker image
      run: |
        docker build -t openlegislation:${{ github.sha }} .
        docker tag openlegislation:${{ github.sha }} openlegislation:latest

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image
      run: |
        docker tag openlegislation:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/openlegislation:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/openlegislation:${{ github.sha }}

  release:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')

    steps:
    - uses: actions/checkout@v4

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline.

          Changes in this release:
          - See commit history for details
        draft: false
        prerelease: false
